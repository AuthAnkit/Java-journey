import java.util.*;

public class Main {
  static int[] calSum(int a[], int b[], int n, int m) {
    int maxLength = Math.max(n, m);
    int[] ans = new int[maxLength + 1]; 
    int i = n - 1;
    int j = m - 1;
    int k = maxLength;
    int carry = 0;

    while (k > 0) {
      int digit = carry;
      if (i >= 0) digit += a[i];
      if (j >= 0) digit += b[j];
      ans[k] = digit % 10;
      carry = digit / 10;
      i--;
      j--;
      k--;
    }
    ans[k] = carry; // Add the final carry to the most significant position

    // If there's no carry in the most significant digit, skip it
    if (ans[0] == 0) {
      return Arrays.copyOfRange(ans, 1, ans.length);
    }
    return ans;
  }

  /* Driver program to test above function */
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n1 = sc.nextInt();
    int[] arr1 = new int[n1];
    for (int i = 0; i < n1; i++) arr1[i] = sc.nextInt();

    int n2 = sc.nextInt();
    int[] arr2 = new int[n2];
    for (int i = 0; i < n2; i++) arr2[i] = sc.nextInt();
    sc.close();

    int[] res = calSum(arr1, arr2, n1, n2);
    for (int i : res) System.out.println(i + " ");
  }
}
